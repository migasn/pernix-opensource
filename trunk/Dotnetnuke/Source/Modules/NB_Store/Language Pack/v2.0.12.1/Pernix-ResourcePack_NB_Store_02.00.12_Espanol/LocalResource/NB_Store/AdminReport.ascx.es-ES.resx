<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AddContent.Action" xml:space="preserve">
    <value>Nuevo reporte</value>
  </data>
  <data name="ModuleHelp.Text" xml:space="preserve">
    <value>Nuevo reporte para el sistema.</value>
  </data>
  <data name="DefaultContent.Text" xml:space="preserve">
    <value>Nuevo reporte de sistema.</value>
  </data>
  <data name="QueryError.Text" xml:space="preserve">
    <value>Error en reporte.</value>
  </data>
  <data name="EmailMsg.Text" xml:space="preserve">
    <value>El reporte ha sido enviado a </value>
  </data>
  <data name="InvalidReportRef.Text" xml:space="preserve">
	<value>Referencia de reporte invalida. El reporte no se puede ejecutar.</value>
	</data>
  <data name="nooutput.Text" xml:space="preserve">
    <value>El reporte no tiene ningun registro</value>
  </data>
  <data name="ControlTitle_edit.Text" xml:space="preserve">
    <value>Editar reporte</value>
  </data>
  <data name="cmdAddParam.Text" xml:space="preserve">
    <value>Parametro(s)</value>
  </data>
  <data name="plReportName.Text" xml:space="preserve">
    <value>Nombre reporte</value>
  </data>
  <data name="plReportName.Help" xml:space="preserve">
    <value>Nombre del reporte</value>
  </data>
  <data name="plReportTitle.Text" xml:space="preserve">
    <value>Mensaje reporte email</value>
  </data>
  <data name="plReportTitle.Help" xml:space="preserve">
    <value>Mensaje a enviar por email.</value>
  </data>
  <data name="plSQLText.Text" xml:space="preserve">
    <value>SQL</value>
  </data>
  <data name="plSQLText.Help" xml:space="preserve">
    <value>Comando sql para ejecutar el reporte</value>
  </data>
  <data name="plSchedulerFlag.Text" xml:space="preserve">
    <value>Horario</value>
  </data>
  <data name="plSchedulerFlag.Help" xml:space="preserve">
    <value>Si se selecciona el reporte se va a ejecutar en un horario</value>
  </data>
  <data name="plSchStartHour.Text" xml:space="preserve">
    <value>Hora</value>
  </data>
  <data name="plSchStartHour.Help" xml:space="preserve">
    <value>La hora del dia en la que se ejecutara el reporte</value>
  </data>
  <data name="plSchStartMins.Text" xml:space="preserve">
    <value>Minutos</value>
  </data>
  <data name="plSchStartMins.Help" xml:space="preserve">
    <value>Minuto del dia en la que se ejecutara el reporte.</value>
  </data>
  <data name="plSchReRunMins.Text" xml:space="preserve">
    <value>Re-ejecutar cada</value>
  </data>
  <data name="plSchReRunMins.Help" xml:space="preserve">
    <value>El perido para la ejecucion.</value>
  </data>
  <data name="plEmailResults.Text" xml:space="preserve">
    <value>Resultado al Email</value>
  </data>
  <data name="plEmailResults.Help" xml:space="preserve">
    <value>Enviar los resultados del reporte al email.</value>
  </data>
  <data name="plEmailFrom.Text" xml:space="preserve">
    <value>Email De</value>
  </data>
  <data name="plEmailFrom.Help" xml:space="preserve">
    <value>Cuenta de correo de donde se va a enviar el reporte.</value>
  </data>
  <data name="plEmailTo.Text" xml:space="preserve">
    <value>Email A</value>
  </data>
  <data name="plEmailTo.Help" xml:space="preserve">
    <value>Cuenta de correo a la que se va a enviar el reporte.</value>
  </data>
  <data name="plXMLinputfile.Text" xml:space="preserve">
    <value>XML Input</value>
  </data>
  <data name="plXMLinputfile.Help" xml:space="preserve">
    <value>Name and path of the XML Input file to be used with the XSL.  If left blank the SQL results will be assumed to run againt the XSL.</value>
  </data>
  <data name="plXSLfile.Text" xml:space="preserve">
    <value>XSL File</value>
  </data>
  <data name="plXSLfile.Help" xml:space="preserve">
    <value>XSL to run against the results or an input file.  The output will be the displayed report.  If left blank no XSL tranlation is done.</value>
  </data>
  <data name="plOutputFileName.Text" xml:space="preserve">
    <value>Archivo Resultado</value>
  </data>
  <data name="plOutputFileName.Help" xml:space="preserve">
    <value>Ruta y nombre del archivo al cual se va enviar el reporte.</value>
  </data>
  <data name="plAllowExport.Text" xml:space="preserve">
    <value>Permitar exportar</value>
  </data>
  <data name="plAllowExport.Help" xml:space="preserve">
    <value>Permite que el reporte pueda ser exportado</value>
  </data>
  <data name="plAllowDisplay.Text" xml:space="preserve">
    <value>Permitir ver</value>
  </data>
  <data name="plAllowDisplay.Help" xml:space="preserve">
    <value>Permite que el reporte se pueda ver en el sitio web</value>
  </data>
  <data name="plDisplayInLine.Text" xml:space="preserve">
    <value>En linea</value>
  </data>
  <data name="plDisplayInLine.Help" xml:space="preserve">
    <value>Si se selecciona el reporte se desplegara en la misma pagina en la que se ejecuta el reporte.</value>
  </data>
  <data name="plReportRef.Text" xml:space="preserve">
    <value>Ref Reporte</value>
  </data>
  <data name="plReportRef.Help" xml:space="preserve">
    <value>Codigo de referencia del producto. Este codigo se va a utilizar en el query string(ReportRef="MYREPORTREF")</value>
  </data>
  <data name="plConnectionString.Text" xml:space="preserve">
    <value>String de conexion</value>
  </data>
  <data name="plConnectionString.Help" xml:space="preserve">
    <value>String de conexion a la base de datos, dejar en blanco para usar la base de datos de DNN.</value>
  </data>
  <data name="plShowSQL.Text" xml:space="preserve">
    <value>Mostrar SQL</value>
  </data>
  <data name="plShowSQL.Help" xml:space="preserve">
    <value>Mostrar el SQL en la consulta.</value>
  </data>
  <data name="lblAddXSL.Text" xml:space="preserve">
    <value>XSL files</value>
  </data>
  <data name="plSQLEmailIf.Text" xml:space="preserve">
    <value>Email solo si es verdadero</value>
  </data>
  <data name="plSQLEmailIf.Help" xml:space="preserve">
    <value></value>
  </data>
  <data name="lblFieldDelimeter.Text" xml:space="preserve">
    <value>Exportar a delimitado</value>
  </data>
  <data name="lblFieldQualifier.Text" xml:space="preserve">
    <value></value>
  </data>
  <data name="cmdCopyReport.Text" xml:space="preserve">
    <value>Copiar reporte?</value>
  </data>
  <data name="cmdEmailReport.Text" xml:space="preserve">
    <value>Email reporte?</value>
  </data>
</root>