<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="plAllProducts.Text" xml:space="preserve">
    <value>Exportar todos los productos</value>
  </data>
  <data name="plAllProducts.Help" xml:space="preserve">
    <value>Todos los productos seran archivados y exportados a un archivo</value>
  </data>
  <data name="plProductImages.Text" xml:space="preserve">
    <value>Exportar imagenes de producto</value>
  </data>
  <data name="plProductImages.Help" xml:space="preserve">
    <value>Todas las imagenes de los productos seran guardados en un archivo zip</value>
  </data>
  <data name="plAllOrders.Text" xml:space="preserve">
    <value>Exportar Ordenes</value>
  </data>
  <data name="plAllOrders.Help" xml:space="preserve">
    <value>Todas las ordenes se exportaran a un archivo</value>
  </data>
  <data name="plPurgeStore.Text" xml:space="preserve">
    <value>Purgar Tienda</value>
  </data>
  <data name="plPurgeStore.Help" xml:space="preserve">
	<value>Todas las ordenes archivas seran enviadas a un archivo. Todos los productos archivados asociadas con las ordenes seran borrados de la tienda. Cualquier imagen sin usar sera eliminada.</value>
  </data>
  <data name="cmdBackup.Text" xml:space="preserve">
    <value>Opciones de Exportar</value>
  </data>
  <data name="cmdRestore.Text" xml:space="preserve">
    <value>Opciones de Importar</value>
  </data>
  <data name="cmdDoBackup.Text" xml:space="preserve">
    <value>Exportar</value>
  </data>
  <data name="cmdDoRestore.Text" xml:space="preserve">
    <value>Importar</value>
  </data>
  <data name="DownLastFile.Text" xml:space="preserve">
    <value>Descargar el archivo exportacion</value>
  </data>
  <data name="ExportError.Text" xml:space="preserve">
    <value>Error Exportando Datos!!</value>
  </data>
  <data name="plImportUpdate.Text" xml:space="preserve">
    <value>Actualizar archivos existentes</value>
  </data>
  <data name="plImportUpdate.Help" xml:space="preserve">
	<value>Productos seran buscados por codigo de referencia, Si el producto existe en la base de datos sera actualizado, de otra manera el producto sera creado</value>
  </data>
  <data name="plImportNew.Text" xml:space="preserve">
    <value>Importar como nuevos productos</value>
  </data>
  <data name="plImportNew.Help" xml:space="preserve">
    <value>Todos los productos seran importados como nuevos.</value>
  </data>
  <data name="plCreateCat.Text" xml:space="preserve">
    <value>Crear categorias</value>
  </data>
  <data name="plCreateCat.Help" xml:space="preserve">
	<value>Si una categoria para un producto importado no existe sera creada.  Caso contrario el producto sera importado con la categoria de "Imported".</value>
  </data>
  <data name="plXMLFile.Text" xml:space="preserve">
    <value>Archivo XML o CSV de Productos</value>
  </data>
  <data name="plXMLFile.Help" xml:space="preserve">
    <value>El archivo para importar productos.</value>
  </data>
  <data name="plZipFile.Text" xml:space="preserve">
    <value>Archivo Zip de Img</value>
  </data>
  <data name="plZipFile.Help" xml:space="preserve">
    <value>El archivo zip con las imagenes de los productos a importar</value>
  </data>
  <data name="plProductDocs.Text" xml:space="preserve">
    <value>Exportar Docs de producto</value>
  </data>
  <data name="plProductDocs.Help" xml:space="preserve">
    <value>Los documentos asociados a los productos seran exportados a un archivo zip.</value>
  </data>
  <data name="plShipping.Text" xml:space="preserve">
    <value>Exportar Datos Flete</value>
  </data>
  <data name="plShipping.Help" xml:space="preserve">
    <value></value>
  </data>
  <data name="plZipDocs.Text" xml:space="preserve">
    <value>Archivo de Docs Producto</value>
  </data>
  <data name="plZipDocs.Help" xml:space="preserve">
    <value>Los documentos de productos a ser importado</value>
  </data>
  <data name="plArchiveProd.Text" xml:space="preserve">
    <value>Archivar Productos</value>
  </data>
  <data name="plArchiveProd.Help" xml:space="preserve">
    <value>Productos que no existan en el archivo a importar seran archivados.</value>
  </data>
  <data name="plImportShipping.Text" xml:space="preserve">
    <value>Importar Archivo Flete</value>
  </data>
  <data name="plImportShipping.Help" xml:space="preserve">
    <value>Archivo con los detalles de los fletes, si no se require dejar en blanco</value>
  </data>
  <data name="InvalidImportFile.Text" xml:space="preserve">
    <value>Archivo Invalido, debe ser un XML o un CSV</value>
  </data>
  <data name="chkExpOrders.Text" xml:space="preserve">
    <value>Incluir todas las ordenes en el archivo a exportar</value>
  </data>
</root>